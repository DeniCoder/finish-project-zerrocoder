FinControl — Сервис учёта личных финансов с аналитикой и Telegram-ботом
О заказчике
Компания: FinAware — стартап, специализирующийся на разработке цифровых инструментов для повседневного управления личными финансами. Команда сосредоточена на создании решений с упором на простоту, автоматизацию и взаимодействие через популярные каналы (в частности, Telegram).
**Запрос:**Создать MVP платформы, сочетающей веб-интерфейс и Telegram-бота для учёта расходов/доходов, с визуальной аналитикой, рекомендациями и возможностью быстрой регистрации операций через чат.
Цель проекта
Создать удобный и мощный сервис для ведения учёта доходов и расходов, анализа финансовой активности, получения персонализированных советов, а также оперативного взаимодействия через Telegram-бота.
________________________________________
Целевая аудитория
Пользователи, стремящиеся контролировать свои доходы и расходы, улучшать финансовую дисциплину, получать аналитику и рекомендации по бюджету, а также быстро получать нужную информацию через Telegram.
________________________________________
Функциональные требования
1. Учёт финансовых операций
Добавление записей:
●	Возможность вручную добавлять доходы и расходы.
●	Обязательные поля: сумма, дата, тип (доход/расход), категория.
●	Дополнительное поле: описание операции.
Категоризация:
●	Минимум 3 категории (например: «Еда», «Транспорт», «Развлечения»).
●	Возможность управления категориями (добавление, редактирование, удаление — опционально).
________________________________________
2. Аналитика и отчёты
Графики и визуализация:
●	Построение графиков доходов и расходов по времени.
●	Диаграмма распределения расходов по категориям.
●	Фильтры: за день, неделю, месяц, год.
Статистика и расчёты:
●	Подсчёт общих доходов, расходов и текущего баланса.
●	Отчёты по категориям и периодам.
●	Автоматическое выявление аномалий (например, резкий рост расходов по категории).
Рекомендации:
●	Генерация советов на основе трат (например, «Вы тратите на еду больше среднего»).
●	Предупреждения при превышении установленного лимита (по категории или общему бюджету).
________________________________________
3. Интеграция с Telegram-ботом
Основной функционал:
●	Команды, например:
○	/today — расходы за сегодня.
○	/week — статистика за неделю.
○	/category food — траты по категории.
●	Возможность получать краткий ежедневный отчёт.
●	Интерактивные кнопки (например: «Подробнее», «Сравнить с прошлой неделей», «Добавить трату»).
Уведомления (опционально):
●	Автоматическая отправка ежедневных или еженедельных отчётов.
●	Уведомления о достижении лимитов.
________________________________________
4. Личный кабинет пользователя
●	Регистрация и авторизация.
●	Просмотр истории операций с фильтрами по датам и категориям.
●	Сохранение «Избранных» отчетов (например: «Месячный анализ»).
●	Настройка уведомлений и рекомендаций.
________________________________________
База данных
●	Хранение пользователей и их финансовых данных.
●	Таблицы: операции, категории, советы, аномалии, история уведомлений.
●	Связь между Telegram ID и пользователем.
●	Использование PostgreSQL.
________________________________________
Технологии
●	Backend: Python + Django
●	База данных: SQLite
●	Аналитика: pandas, matplotlib / plotly
●	Telegram-бот: aiogram
●	Планировщик задач: Cron
●	Frontend: Django templates + Bootstrap
●	Аутентификация: Django auth
________________________________________
Критерии успешного выполнения
●	Пользователь может регистрироваться, добавлять операции, просматривать историю.
●	Система строит корректные графики и считает аналитику.
●	Бот стабильно отвечает на команды и отправляет статистику.
●	Данные хранятся и обрабатываются безопасно и структурированно.
●	Интерфейс адаптивный и понятный.
________________________________________
Дополнительные улучшения (опционально)
●	Подкатегории расходов (например: Еда → Рестораны / Продукты).
●	Система планирования бюджета и сравнение с фактом.
●	Расширенные советы с помощью AI.
●	Мобильная адаптация интерфейса.
●	Экспорт отчетов в PDF / Excel.
●	Голосовой ввод трат через Telegram (или кнопки быстрого добавления).
План реализации по этапам
Этап 1: Базовая структура и модели
●	Создание проекта и моделей: User, Transaction, Category
●	Реализация формы добавления операций
●	Отображение списка операций в шаблоне
Этап 2: Telegram-бот
●	Настройка aiogram
●	Обработка основных команд
●	Привязка Telegram ID к пользователю
●	Отправка сводок и добавление операций из Telegram
Этап 3: Аналитика и графики
●	Интеграция с matplotlib/plotly
●	Построение графиков доходов/расходов
●	Вывод диаграмм по категориям
●	Добавление советов и предупреждений
Этап 4: Личный кабинет и фильтры
●	Регистрация, авторизация
●	Фильтрация по дате, категориям
●	Сохранённые отчёты
Этап 5: Уведомления и улучшения
●	Настройка cron-задач
●	Ежедневные уведомления и напоминания
●	Завершение MVP, деплой

