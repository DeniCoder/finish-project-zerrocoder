from aiobot.states import SetLimitStates
from aiobot.utils.formatting import format_rub
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from asgiref.sync import sync_to_async
from core.models import Category, CategoryLimit
from django.contrib.auth.models import User

router = Router()

@router.message(F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_fsm(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–≤–æ–¥ –ª–∏–º–∏—Ç–∞ –æ—Ç–º–µ–Ω—ë–Ω.")

@router.message(Command("setlimit"))
async def start_setlimit(message: types.Message, state: FSMContext):
    await state.set_state(SetLimitStates.waiting_for_category_type)
    await message.answer("–î–ª—è –∫–∞–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –ª–∏–º–∏—Ç?\n1. –†–∞—Å—Ö–æ–¥–Ω—ã–µ\n2. –î–æ—Ö–æ–¥–Ω—ã–µ\n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É:")

@router.message(SetLimitStates.waiting_for_category_type)
async def setlimit_category_type(message: types.Message, state: FSMContext):
    choice = message.text.strip()
    if choice not in ("1", "2"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1 (—Ä–∞—Å—Ö–æ–¥–Ω—ã–µ) –∏–ª–∏ 2 (–¥–æ—Ö–æ–¥–Ω—ã–µ).")
        return
    is_income = choice == "2"

    categories = await sync_to_async(list)(Category.objects.filter(is_income=is_income))
    if not categories:
        await message.answer("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.")
        await state.clear()
        return
    from aiobot.utils.menu import build_category_menu
    category_buttons = [(cat.name, f"catid_{cat.id}") for cat in categories]
    await state.update_data(is_income=is_income, category_choices={f"catid_{cat.id}": cat.id for cat in categories})
    await state.set_state(SetLimitStates.waiting_for_category)
    menu = await build_category_menu(category_buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=menu)

@router.callback_query(lambda c: c.data.startswith("catid_"), SetLimitStates.waiting_for_category)
async def setlimit_category_callback(query: types.CallbackQuery, state: FSMContext):
    category_id = int(query.data.replace("catid_", ""))
    await state.update_data(category_id=category_id)
    await state.set_state(SetLimitStates.waiting_for_period_type)
    await query.message.answer("–î–ª—è –∫–∞–∫–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∑–∞–¥–∞—Ç—å –ª–∏–º–∏—Ç?\n1. –î–µ–Ω—å\n2. –ú–µ—Å—è—Ü\n3. –ì–æ–¥\n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É:")
    await query.answer()

@router.message(SetLimitStates.waiting_for_period_type)
async def setlimit_period_select(message: types.Message, state: FSMContext):
    periods = {"1": "day", "2": "month", "3": "year"}
    choice = message.text.strip()
    if choice not in periods:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ: 1 (–¥–µ–Ω—å), 2 (–º–µ—Å—è—Ü), 3 (–≥–æ–¥)")
        return
    await state.update_data(period_type=periods[choice])
    await state.set_state(SetLimitStates.waiting_for_amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç (—Ä—É–±.) –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–µ—Ä–∏–æ–¥–∞:")

@router.message(SetLimitStates.waiting_for_amount)
async def setlimit_amount(message: types.Message, state: FSMContext):
    data = await state.get_data()
    try:
        amount = float(message.text.replace(' ', '').replace(',', '.'))
        if amount <= 0:
            raise ValueError()
    except Exception:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–∏–º–∏—Ç. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    user = await sync_to_async(User.objects.get)(username=str(message.from_user.id))
    category = await sync_to_async(Category.objects.get)(id=data["category_id"])
    period_type = data["period_type"]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ª–∏–º–∏—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å–≤—è–∑–∫–∏
    prev_limit = await sync_to_async(CategoryLimit.objects.filter(
        user=user, category=category, period_type=period_type
    ).first)()
    updated = prev_limit is not None
    limit, _ = await sync_to_async(CategoryLimit.objects.update_or_create)(
        user=user, category=category, period_type=period_type, defaults={"amount": amount})
    if updated:
        await message.answer(
            f"üîÑ –õ–∏–º–∏—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category.name}¬ª –∑–∞ {limit.get_period_type_display().lower()} –æ–±–Ω–æ–≤–ª—ë–Ω: "
            f"–±—ã–ª–æ {format_rub(prev_limit.amount)} —Ä—É–±., —Å—Ç–∞–ª–æ {format_rub(amount)} —Ä—É–±."
        )
    else:
        await message.answer(
            f"‚úÖ –õ–∏–º–∏—Ç {format_rub(amount)} —Ä—É–±. —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category.name}¬ª –∑–∞ {limit.get_period_type_display().lower()}."
        )
    await state.clear()

def register_setlimit_handlers(dp):
    dp.include_router(router)
