from datetime import date, timedelta
from collections import defaultdict
from aiobot.utils.formatting import format_rub
from asgiref.sync import sync_to_async
from core.models import CategoryLimit

async def check_limit_exceed(user, category, total: float) -> str | None:
    limit = await sync_to_async(CategoryLimit.objects.filter(user=user, category=category).first)()
    if limit and total > float(limit.amount):
        exceed_limit = total - float(limit.amount)
        percent = (total - float(limit.amount)) / float(limit.amount) * 100
        return (f"\nüî• –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category.name}¬ª: "
                f"{format_rub(exceed_limit)} (–ª–∏–º–∏—Ç {format_rub(limit.amount)}, –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ {percent:.1f}%)")
    return None


async def detect_anomalies(
    user, current_start: date, current_end: date, months_back: int = 3
) -> list[str]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –∞–Ω–æ–º–∞–ª–∏—è–º —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
    """
    from core.models import Transaction, Category

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    current_transactions = await sync_to_async(list)(
        Transaction.objects
        .filter(user=user, date__gte=current_start, date__lte=current_end, category__is_income=False)
        .select_related('category')
    )
    current_by_cat = defaultdict(float)
    for t in current_transactions:
        current_by_cat[t.category.name] += float(t.amount)

    # –°—Ä–µ–¥–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–µ—Å—è—Ü–µ–≤ (–¥–æ —Ç–µ–∫—É—â–µ–≥–æ)
    anomalies = []
    for cat_name, current_value in current_by_cat.items():
        sum_prev = 0.0
        count_prev = 0
        for delta in range(1, months_back + 1):
            prev_start = (current_start.replace(day=1) - timedelta(days=1)).replace(day=1)
            prev_start = prev_start.replace(month=(current_start.month - delta - 1) % 12 + 1,
                                            year=current_start.year if current_start.month - delta > 0 else current_start.year - 1)
            prev_end = (prev_start.replace(day=28) + timedelta(days=4)).replace(day=1) - timedelta(days=1)
            prev_transactions = await sync_to_async(list)(
                Transaction.objects.filter(
                    user=user, category__name=cat_name, category__is_income=False,
                    date__gte=prev_start, date__lte=prev_end
                )
            )
            total = sum(float(t.amount) for t in prev_transactions)
            if total > 0:
                sum_prev += total
                count_prev += 1
        avg_prev = sum_prev / count_prev if count_prev else 0
        if avg_prev > 0 and current_value > avg_prev * 1.10:  # 10% –∏ –≤—ã—à–µ
            percent = (current_value - avg_prev) / avg_prev * 100
            anomalies.append(
                f"‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{cat_name}¬ª "
                f"–≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ {format_rub(current_value)} ‚Äî –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ "
                f"—á–µ–º –∑–∞ –ø—Ä–æ—à–ª—ã–µ –º–µ—Å—è—Ü—ã –Ω–∞ {percent:.1f}%."
            )
    return anomalies
